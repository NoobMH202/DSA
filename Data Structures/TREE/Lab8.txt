                                                             
                                                             ---------------------------------------
TASK=01
===================
from collections import deque
class Node:
    def __init__(self,value,left=None,right=None):
        self.key=value
        self.left=left
        self.right=right
    def height(root):
        if (root==0):
            return 0
        queue=deque()
        queue.append(root)
        height=0
        while queue:
            size=len(queue)
            while (len(queue)>0):
                front=queue.popleft()
                if front.left:
                    queue.append(front.left)
                if front.right:
                    queue.append(front.right)
                size-=1
            height+=1
        return height

if __name__ == '__main__':
    root=Node(20)
    root.left=Node(10)
    root.right=Node(15)
    root.left.left=Node(16)
    root.left.right=Node(12)
    root.right.left=Node(8)
    root.right.right=Node(25)

    print("The height of the binary tree is", height(root))
=======================================================================
TASK=02
================
class newNode:
    def __init__(self,value):
        self.data=value
        self.left=None
        self.right=None
    def getLevelUtil(node,data,level):
        if (node is None):
            return 0
        if (node.data==data):
            return level
        downlevel=getLevelUtil(node.left,data,level+1)
        if (downlevel is not None):
            return downlevel
        downlevel=getLevelUtil(node.right,data,level+1)
        return downlevel

    def getLevel(node,data):
        return getLevelUtil(node,data,1)

    if __name__ == '__main__':
        root = newNode(5)
        root.left = newNode(2)
        root.right = newNode(3)
        root.left.left = newNode(1)
        root.left.right = newNode(4)

        for x in range(1,6):
            level=getLevel(root,x)
            if (level):
                print("Level of",x,
                    "is", getLevel(root,x))
            else:
                print(x,"is not present in tree")
=========================================================================
TASK=03
==================
class Node:
    def __init__(self, value):
        self.info=value
        self.lchild=None
        self.rchild=None
class BinaryTree:
    def __init__(self):
        self.root=None
    def is_empty(self):
        return self.root==None
    def display(self):
        self._display(self.root, 0)
        print()
    def _display(self, p, level):
        if p is None:
            return
        self._display(p.rchild, level + 1)
        print()
        for i in range(level):
            print(" ", end='')
        print(p.info)
        self._display(p.lchild, level + 1 )
    def preorder(self):
        self._preorder(self.root)
        print()
    def _preorder(self, p):
        if p is None:
            return
        print(p.info, " ", end='')
        self._preorder(p.lchild)
        self._preorder(p.lchild)
    def create_tree(self):
        self.root = Node('P')
        self.root.lchild = Node('Q')
        self.root.rchild = Node('R')
        self.root.lchild.lchild = Node('A')
        self.root.lchild.rchild = Node('B')
        self.root.rchild.lchild = Node('X')
bt = BinaryTree()
bt.create_tree()
bt.display()
print()
print("Preorder : ")
bt.preorder()
print("")
================================================================
TASK=04
====================
class Node:
    def __init__(self, value):
        self.info = value
        self.lchild = None
        self.rchild = None
class BinaryTree:
    def __init__(self):
        self.root = None
    def is_empty(self):
        return self.root == None
    def display(self):
        self._display(self.root, 0)

        print()
    def _display(self, p, level):
        if p is None:
            return
        self._display(p.rchild, level + 1)
        print()
        for i in range(level):
            print(" ", end='')
        print(p.info)
        self._display(p.lchild, level + 1 )
    def inorder(self):
        self._inorder(self.root)
        print()
    def _inorder(self, p):
        if p is None:
            return
        self._inorder(p.lchild)
        print(p.info, " ", end='')
    def create_tree(self):
        self.root = Node('P')
        self.root.lchild = Node('Q')
        self.root.rchild = Node('R')
        self.root.lchild.lchild = Node('A')
        self.root.lchild.rchild = Node('B')
        self.root.rchild.lchild = Node('X')
bt = BinaryTree()
bt.create_tree()
bt.display()
print()
print("Inorder : ")
bt.inorder()
print("")
========================================================
TASK=05
=================
class Node:
    def __init__(self, value):
        self.info = value
        self.lchild = None
        self.rchild = None
class BinaryTree:
    def __init__(self):
        self.root = None
    def is_empty(self):
        return self.root == None
    def display(self):
        self._display(self.root, 0)
        print()
    def _display(self, p, level):
        if p is None:
            return
        self._display(p.rchild, level + 1)
        print()
        for i in range(level):
            print(" ", end='')
        print(p.info)
        self._display(p.lchild, level + 1 )
    def level_order(self):
        if self.root is None:
            print("Tree is Empty")
            return
        qu = deque()
        qu.append(self.root)
        while len(qu) != 0:
            p = qu.popleft()
            print(p.info + " ", end='')
            if p.lchild is not None:
                qu.append(p.lchild)
            if p.rchild is not None:
            qu.append(p.rchild)

    def create_tree(self):
        self.root = Node('P')
        self.root.lchild = Node('Q')
        self.root.rchild = Node('R')
        self.root.lchild.lchild = Node('A')
        self.root.lchild.rchild = Node('B')
        self.root.rchild.lchild = Node('X')
bt = BinaryTree()
bt.create_tree()
bt.display()
print()
print("Postorder : ")
bt.postorder()
print("")
=====================================================
TASK=06
====================
class newNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
    def inorder(root) :
        if (root == None):
            return
        inorder(root.left)
        print(root.data, end = " ")
        inorder(root.right)
    def isIdentical(root1, root2) :
        if (root1 == None and root2 == None) :
            return 1
        elif (root1 != None and root2 == None) :
            return 0
        elif (root1 == None and root2 != None) :
            return 0
        else:

        if (root1.data == root2.data and isIdentical(root1.left, root2.left) and isIdentical(root1.right,
    root2.right)) :
            return 1
        else:
        return 0

if __name__ == '__main__':
    root1 = newNode(5)
    root2 = newNode(5)
    root1.left = newNode(3)
    root1.right = newNode(8)
    root1.left.left = newNode(2)
    root1.left.right = newNode(4)
    root2.left = newNode(3)
    root2.right = newNode(8)
    root2.left.left = newNode(2)
    root2.left.right = newNode(4)
    if (isIdentical(root1, root2)):
        print("Both BSTs are identical")
    else:
        print("BSTs are not identical")
====================================================================
TASK=07
======================
class Node:
    def __init__(self, data, left=None, right=None, random=None):
        self.data = data
        self.left = left
        self.right = right
        self.random = random
    def preorder(root):
        if root is None:
            return
        print(root.data, end=" —> ( ")
        print((root.left.data if root.left else "X"), end=", ")

        print((root.right.data if root.right else "X"), end=", ")
        print((root.random.data if root.random else "X"), ")")
        preorder(root.left)
        preorder(root.right)
    def updateRandomPointers(root, dict):
        if dict.get(root) is None:
            return
        dict.get(root).random = dict.get(root.random)
        updateRandomPointers(root.left, dict)
        updateRandomPointers(root.right, dict)

    def cloneLeftRightPointers(root, dict):
        if root is None:
            return None
        dict[root] = Node(root.data)
        dict[root].left = cloneLeftRightPointers(root.left, dict)
        dict[root].right = cloneLeftRightPointers(root.right, dict)
        return dict[root]
    def cloneSpecialBinaryTree(root):
        dict = {}
        cloneLeftRightPointers(root, dict)
        updateRandomPointers(root, dict)
        return dict[root]

if _name_ == '_main_':
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.left = Node(4)
    root.left.right = Node(5)
    root.right.left = Node(6)
    root.right.right = Node(7)

    root.random = root.right.left.random
    root.left.left.random = root.right
    root.left.right.random = root
    root.right.left.random = root.left.left
    root.random = root.left
    print("Preorder traversal of the original tree:")
    preorder(root)
    clone = cloneSpecialBinaryTree(root)
    print("\nPreorder traversal of the cloned tree:")
    preorder(clone)
==============================================================================
